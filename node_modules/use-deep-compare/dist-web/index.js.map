{"version":3,"file":"index.js","sources":["../dist-src/useDeepCompareMemoize.js","../dist-src/useDeepCompareCallback.js","../dist-src/useDeepCompareEffect.js","../dist-src/useDeepCompareMemo.js"],"sourcesContent":["import React from 'react';\nimport { dequal } from 'dequal';\nexport function useDeepCompareMemoize(dependencies) {\n  const dependenciesRef = React.useRef(dependencies);\n  const signalRef = React.useRef(0);\n\n  if (!dequal(dependencies, dependenciesRef.current)) {\n    dependenciesRef.current = dependencies;\n    signalRef.current += 1;\n  }\n\n  return React.useMemo(() => dependenciesRef.current, [signalRef.current]);\n}","import React from 'react';\nimport { useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareCallback` will return a memoized version of the callback that\n * only changes if one of the `dependencies` has changed.\n *\n * Warning: `useDeepCompareCallback` should not be used with dependencies that\n * are all primitive values. Use `React.useCallback` instead.\n *\n */\n\nexport function useDeepCompareCallback(callback, dependencies) {\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}","import React from 'react';\nimport { useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * Accepts a function that contains imperative, possibly effectful code.\n *\n * Warning: `useDeepCompareEffect` should not be used with dependencies that\n * are all primitive values. Use `React.useEffect` instead.\n *\n */\n\nexport function useDeepCompareEffect(effect, dependencies) {\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}","import React from 'react';\nimport { useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `dependencies` has changed.\n *\n * Warning: `useDeepCompareMemo` should not be used with dependencies that\n * are all primitive values. Use `React.useMemo` instead.\n *\n */\n\nexport function useDeepCompareMemo(factory, dependencies) {\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}"],"names":[],"mappings":";;;AAEO,SAAS,qBAAqB,CAAC,YAAY,EAAE;EAClD,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;EACnD,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;;EAElC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,OAAO,CAAC,EAAE;IAClD,eAAe,CAAC,OAAO,GAAG,YAAY,CAAC;IACvC,SAAS,CAAC,OAAO,IAAI,CAAC,CAAC;GACxB;;EAED,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,eAAe,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;;;CAC1E,DCVD;;;;;;;;;AASA,AAAO,SAAS,sBAAsB,CAAC,QAAQ,EAAE,YAAY,EAAE;EAC7D,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;;;CACzE,DCXD;;;;;;;;AAQA,AAAO,SAAS,oBAAoB,CAAC,MAAM,EAAE,YAAY,EAAE;EACzD,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;;;CAC9D,DCVD;;;;;;;;;AASA,AAAO,SAAS,kBAAkB,CAAC,OAAO,EAAE,YAAY,EAAE;EACxD,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;;;;;"}