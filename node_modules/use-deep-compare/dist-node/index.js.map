{"version":3,"file":"index.js","sources":["../dist-src/useDeepCompareMemoize.js","../dist-src/useDeepCompareCallback.js","../dist-src/useDeepCompareEffect.js","../dist-src/useDeepCompareMemo.js"],"sourcesContent":["import React from 'react';\nimport { dequal } from 'dequal';\nexport function useDeepCompareMemoize(dependencies) {\n  const dependenciesRef = React.useRef(dependencies);\n  const signalRef = React.useRef(0);\n\n  if (!dequal(dependencies, dependenciesRef.current)) {\n    dependenciesRef.current = dependencies;\n    signalRef.current += 1;\n  }\n\n  return React.useMemo(() => dependenciesRef.current, [signalRef.current]);\n}","import React from 'react';\nimport { useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareCallback` will return a memoized version of the callback that\n * only changes if one of the `dependencies` has changed.\n *\n * Warning: `useDeepCompareCallback` should not be used with dependencies that\n * are all primitive values. Use `React.useCallback` instead.\n *\n */\n\nexport function useDeepCompareCallback(callback, dependencies) {\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}","import React from 'react';\nimport { useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * Accepts a function that contains imperative, possibly effectful code.\n *\n * Warning: `useDeepCompareEffect` should not be used with dependencies that\n * are all primitive values. Use `React.useEffect` instead.\n *\n */\n\nexport function useDeepCompareEffect(effect, dependencies) {\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}","import React from 'react';\nimport { useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `dependencies` has changed.\n *\n * Warning: `useDeepCompareMemo` should not be used with dependencies that\n * are all primitive values. Use `React.useMemo` instead.\n *\n */\n\nexport function useDeepCompareMemo(factory, dependencies) {\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}"],"names":["useDeepCompareMemoize","dependencies","dependenciesRef","React","useRef","signalRef","dequal","current","useMemo","useDeepCompareCallback","callback","useCallback","useDeepCompareEffect","effect","useEffect","useDeepCompareMemo","factory"],"mappings":";;;;;;;;;AAEO,SAASA,qBAAT,CAA+BC,YAA/B,EAA6C;QAC5CC,eAAe,GAAGC,KAAK,CAACC,MAAN,CAAaH,YAAb,CAAxB;QACMI,SAAS,GAAGF,KAAK,CAACC,MAAN,CAAa,CAAb,CAAlB;;MAEI,CAACE,aAAM,CAACL,YAAD,EAAeC,eAAe,CAACK,OAA/B,CAAX,EAAoD;IAClDL,eAAe,CAACK,OAAhB,GAA0BN,YAA1B;IACAI,SAAS,CAACE,OAAV,IAAqB,CAArB;;;SAGKJ,KAAK,CAACK,OAAN,CAAc,MAAMN,eAAe,CAACK,OAApC,EAA6C,CAACF,SAAS,CAACE,OAAX,CAA7C,CAAP;;;ACTF;;;;;;;;;AASA,AAAO,SAASE,sBAAT,CAAgCC,QAAhC,EAA0CT,YAA1C,EAAwD;SACtDE,KAAK,CAACQ,WAAN,CAAkBD,QAAlB,EAA4BV,qBAAqB,CAACC,YAAD,CAAjD,CAAP;;;ACVF;;;;;;;;AAQA,AAAO,SAASW,oBAAT,CAA8BC,MAA9B,EAAsCZ,YAAtC,EAAoD;EACzDE,KAAK,CAACW,SAAN,CAAgBD,MAAhB,EAAwBb,qBAAqB,CAACC,YAAD,CAA7C;;;ACTF;;;;;;;;;AASA,AAAO,SAASc,kBAAT,CAA4BC,OAA5B,EAAqCf,YAArC,EAAmD;SACjDE,KAAK,CAACK,OAAN,CAAcQ,OAAd,EAAuBhB,qBAAqB,CAACC,YAAD,CAA5C,CAAP;;;;;;;"}